#!/usr/bin/python3
from jinja2 import Environment, FileSystemLoader
import socket
import os
from pprint import pp
from enum import Enum
import shutil
import sys
import subprocess
import inspect
import re
import hashlib
import datetime

class TemplateMode(Enum):
	ExtensionOnly = 2
	AllExceptExtension = 3

class TemplateHandleMode(Enum):
	Copy = 1
	ApplyTemplate = 2
	SkipEmpty = 3
	SkipUnmodified = 4

class OverallStatus(Enum):
	ExtensionOnly = 2
	AllExceptExtension = 3

## Define global variables
current_verbosity = 2
#TemplateMode = TemplateMode.ExtensionOnly
TemplateMode = TemplateMode.AllExceptExtension
CacheRoot = f"{os.environ['HOME']}/.cache/cfgmgr"
CacheDirectory = ''
TemplateDirectory = f"{os.environ['HOME']}/vc/anbanker/config-home"
WorkingDirectory = os.environ['HOME']
#https://jinja.palletsprojects.com/en/stable/templates/#whitespace-control
TemplateTool = Environment(
		loader=FileSystemLoader(TemplateDirectory),
		trim_blocks=True)
RunLog = ''
Files = {}
TemplateData = {}
ConfigData = {}

def LOG(verbosity_level, message):
	if current_verbosity >= verbosity_level:
		print(message)

def LoadTemplateFiles():
	LOG(3, 'cfgmgr: LoadTemplateFiles: Beginning file load...')
	for root, dirs, filesInDir in os.walk(TemplateDirectory):
		LOG(4, f"cfgmgr: LoadTemplateFiles: Found directory: {root}")
		#for d in dirs:
		dirs[:] = [d for d in dirs if d not in ['.git']]
		for file in filesInDir:
			TemplateFileAbsPath = os.path.join(root, file)
			TemplateFileRelPath = os.path.relpath(TemplateFileAbsPath, TemplateDirectory)
			LOG(4, f"cfgmgr: LoadTemplateFiles:   Found File: {TemplateFileRelPath}")
			
			# Skip cfgmgr special filesInDir
			CacheFileRelPath,TemplateFileExtension = os.path.splitext(TemplateFileRelPath)
			if TemplateFileExtension == '.cfgmgr': continue
			
			# Skip git/github special filesInDir
			if TemplateFileRelPath == '.gitignore': continue
			if TemplateFileRelPath == 'README.md': continue
			
			# Determine how to handle this file based on mode and extension
			IsTemplate = None
			if TemplateMode == TemplateMode.ExtensionOnly:
				if TemplateFileExtension in ['.tmpl', '.template']:
					IsTemplate = 1
					# CacheFileRelPath already set, removing extionsion
				else:
					CacheFileRelPath = TemplateFileRelPath
					IsTemplate = 0
			elif TemplateMode == TemplateMode.AllExceptExtension:
				if TemplateFileExtension in ['.notmpl', '.notemplate']:
					#CacheFileRelPath already set
					IsTemplate = 0
				else:
					IsTemplate = 1
					CacheFileRelPath = TemplateFileRelPath
			else:
				raise NotImplementedError()
			
			## Save basic data to Files
			Files[CacheFileRelPath] = {
				'TemplatePath': TemplateFileAbsPath,
				'RelPath': CacheFileRelPath,
				'TemplateFileRelPath': TemplateFileRelPath,
				'IsTemplate': IsTemplate}
			
			## add timestamp
			Files[CacheFileRelPath]['TemplateLastModTime'] = os.path.getmtime(TemplateFileAbsPath)
			
			## Add working tree path
			WorkingPath = os.path.join(WorkingDirectory, CacheFileRelPath)
			Files[CacheFileRelPath]['WorkingPath'] = WorkingPath
			#if os.path.exists(WorkingPath):
			#	Files[CacheFileRelPath]['WorkingLastModTime'] = os.path.getmtime(WorkingPath)
			
			## Add cache path
			Files[CacheFileRelPath]['CachePath'] = os.path.join(CacheDirectory, CacheFileRelPath)
			
			LOG(4, f"cfgmgr: LoadTemplateFiles:    Summary1: {CacheFileRelPath}, TemplateFileRelPath={TemplateFileRelPath}, IsTemplate={IsTemplate}, TemplateLastModTime={Files[CacheFileRelPath]['TemplateLastModTime']}")
	
	if os.path.exists(RunLog):
		LOG(3, 'cfgmgr: LoadTemplateFiles: Loading run log...')
		with open(RunLog, 'r') as file:
			for line in file:
				# Skip comments
				if line.startswith('#'): continue
				if not line: continue
				
				# Process line
				RelPath,Last_ApplyModTime,Last_CacheUpdateTime,Last_CacheUpdateIsTemplate,Last_IsEmpty = line.strip().split(',')
				
				## Convert strings
				Last_ApplyModTime = float(Last_ApplyModTime)
				Last_CacheUpdateTime = float(Last_CacheUpdateTime)
				Last_CacheUpdateIsTemplate = (Last_CacheUpdateIsTemplate == '1')
				Last_IsEmpty = (Last_IsEmpty == '1')
				LOG(4, f'cfgmgr: LoadTemplateFiles: Loading run log:   Line: {RelPath}, Last_ApplyModTime={Last_ApplyModTime}, Last_CacheUpdateTime={Last_CacheUpdateTime}, Last_CacheUpdateIsTemplate={Last_CacheUpdateIsTemplate}, Last_IsEmpty={Last_IsEmpty}')
				
				# Skip non-existant filesInDir
				if RelPath not in Files:
					#print(f"WARNING: {RelPath} not found in template directory")
					#File is removed
					continue
				
				# Update file properties
				Files[RelPath]['Last_ApplyModTime'] = Last_ApplyModTime
				Files[RelPath]['Last_CacheUpdateTime'] = Last_CacheUpdateTime
				Files[RelPath]['IsEmpty'] = Last_IsEmpty
				if     (Files[RelPath]['IsTemplate']) \
				   and (not Last_CacheUpdateIsTemplate) \
				   and (Files[RelPath]['TemplateLastModTime'] == Last_CacheUpdateTime):
					Files[RelPath]['IsTemplate'] = False
					LOG(4, f"cfgmgr: LoadTemplateFiles: Clearing template flag: {RelPath}")
	
	for RelPath,attr in Files.items():
		LOG(4, f"cfgmgr: LoadTemplateFiles: FileSummary: {RelPath}, IsTemplate={attr['IsTemplate']}, IsEmpty={attr['IsEmpty']}, TemplateLastModTime={attr['TemplateLastModTime']}")

def LoadTemplateData():
	# Automatic template data
	TemplateData['hostname'] = socket.gethostname()
	TemplateData['IsWSL'] = os.path.exists('/proc/sys/fs/binfmt_misc/WSLInterop')
	
	# User provided template data
	TemplateDataFile = os.path.join(TemplateDirectory, 'private-data.cfgmgr')
	if os.path.exists(TemplateDataFile):
		# Read file
		with open(TemplateDataFile, 'r') as file:
			# Process each line
			for line in file:
				# Skip comments
				if line.startswith('#'): continue
				
				# Split line into key and value
				key, value = re.split(r'\s*=\s*', line.strip(), 1)
				
				# Add to TemplateData
				TemplateData[key] = value

def LoadConfigData():
	# Defaults
	ConfigData['difftool'] = '/usr/bin/meld'
	
	# User provided template data
	ConfigDataFile = os.path.join(TemplateDirectory, 'config-data.cfgmgr')
	if os.path.exists(ConfigDataFile):
		# Read file
		with open(ConfigDataFile, 'r') as file:
			# Process each line
			for line in file:
				# Skip comments
				if line.startswith('#'): continue
				
				# Split line into key and value
				key, value = re.split(r'\s*=\s*', line.strip(), 1)
				
				# Add to TemplateData
				ConfigData[key] = value
	
def UpdateCacheFiles():
	LoadTemplateData()
	LOG(3, f'cfgmgr: UpdateCacheFiles: Beginning cache update ({CacheDirectory})...')
	
	LOG(4, 'cfgmgr: UpdateCacheFiles:   Removing deleted filesInDir...')
	ExistingCache = {}
	for root, dirs, filesInDir in os.walk(CacheDirectory):
		for file in filesInDir:
			## Skip cfgmgr special filesInDir
			file_extension = os.path.splitext(file)[1]
			if file_extension == '.cfgmgr': continue
			
			## Remove file if not in template directory
			FilePath = os.path.join(root, file)
			FileRelPath = os.path.relpath(FilePath, CacheDirectory)
			if not FileRelPath in Files:
				LOG(4, f"cfgmgr: UpdateCacheFiles:     Deleting: {FileRelPath}")
				os.remove(FilePath)
			else:
				# Save which filesInDir exist in case template processing indicates this should be removed
				ExistingCache[FileRelPath] = 1
	
	LOG(4, 'cfgmgr: UpdateCacheFiles:   Updating cache...')
	RunLog_FH = []
	for RelPath,attr in Files.items():
		LOG(4, f"cfgmgr: UpdateCacheFiles:     Checking File: {RelPath}")
		
		## Determine if we need to update the cache file
		if ('Last_CacheUpdateTime' in attr) and (attr['Last_CacheUpdateTime'] == attr['TemplateLastModTime']):
			continue
		
		LOG(4, f"cfgmgr: UpdateCacheFiles:       Need to update cache: {RelPath}")
		CacheFileDir = os.path.dirname(attr['CachePath'])
		attr['IsEmpty'] = False
		
		if not attr['IsTemplate']:
			LOG(4, f"cfgmgr: UpdateCacheFiles:       Copy: {RelPath}")
			os.makedirs(CacheFileDir, exist_ok=True)
			shutil.copy(attr['TemplatePath'], attr['CachePath'])
		else:
			LOG(4, f"cfgmgr: UpdateCacheFiles:       ApplyTemplate: {RelPath}")
			
			# Read template
			with open(attr['TemplatePath'], 'r') as file:
				TemplateContent = file.read()
			
			## Load and apply template
			template = TemplateTool.get_template(attr['TemplateFileRelPath'])
			
			Rendered = template.render(TemplateData)
			attr['CacheContent'] = Rendered
			
			## Skip if empty after rendering
			if Rendered.strip():
				# File is non-empty
				LOG(3, f"cfgmgr: UpdateCacheFiles:       ApplyTemplate: Cache upated: {RelPath}")
				if (Rendered == TemplateContent) or (Rendered == TemplateContent[:-1]):
					#Mark as non-template, so it can be updated from working directory
					LOG(3, f"cfgmgr: UpdateCacheFiles:     ApplyTemplate: Non-template: {RelPath}")
					attr['IsTemplate'] = False
				else:
					LOG(3, f"cfgmgr: UpdateCacheFiles:       ApplyTemplate: Yes-Template: {RelPath}")
					#print(f'** RENDERED **\n{Rendered}\n** END RENDERED **')
					#print(f'** TEMPLATE **\n{TemplateContent}\n** END TEMPLATE **')
					attr['IsTemplate'] = True
				os.makedirs(CacheFileDir, exist_ok=True)
				with open(attr['CachePath'], 'w') as file:
					file.write(Rendered)
			else:
				# File is empty
				LOG(3, f"cfgmgr: UpdateCacheFiles:       ApplyTemplate: Empty: {RelPath}")
				attr['IsEmpty'] = True
				if RelPath in ExistingCache:
					LOG(3, f"cfgmgr: UpdateCacheFiles:       ApplyTemplate: Empty: Removed: {RelPath}")
					os.remove(attr['CachePath'])
				
		if not RunLog_FH:
			RunLog_FH = open(RunLog, 'a')
		if 'Last_ApplyModTime' not in attr: attr['Last_ApplyModTime'] = 0
		if 'IsEmpty' not in attr: attr['IsEmpty'] = False
		RunLog_FH.write(f"{RelPath},{attr['Last_ApplyModTime']},{attr['TemplateLastModTime']},{0+attr['IsTemplate']},{0+attr['IsEmpty']}\n")
	#LOG(4,f"DEBUG: Files=")
	#if current_verbosity>=4: pp(Files)

def CleanCacheFiles():
	LOG(3, f'cfgmgr: CleanCacheFiles: Beginning cache clean ({CacheDirectory})...')
	os.remove(CacheDirectory)
	os.remove(RunLog)

def CalculateStatus():
	for RelPath, attr in Files.items():
		## Get working directory status
		if os.path.exists(attr['WorkingPath']):
			attr['WorkingLastModTime'] = os.path.getmtime(attr['WorkingPath'])
		else:
			attr['WorkingLastModTime'] = None
		
		## Skip if file shouldn't be managed in working directory
		if attr['IsEmpty'] == True:
			if attr['WorkingLastModTime'] == None:
				attr['Status'] = 'Empty'
			else:
				attr['Status'] = "Exists-but-shouldn't"
		else:
			if attr['WorkingLastModTime'] == None:
				attr['Status'] = 'Missing'
			else:
				if attr['WorkingLastModTime'] == attr['Last_ApplyModTime']:
					attr['Status'] = 'Same'
				else:
					if RelPath == '.gitignore':
						print(f'attr={attr}')
						raise Exception()
					
					if not 'CacheContent' in attr:
						with open(attr['CachePath'], 'r') as file:
							attr['CacheContent'] = file.read()
					
					with open(attr['WorkingPath'], 'r') as file:
						WorkingContent = file.read()
					
					if WorkingContent == attr['CacheContent']:
						attr['Status'] = 'Same(content)'
					elif WorkingContent[0:-1] == attr['CacheContent']:
						attr['Status'] = 'Similar'
					else:
						attr['Status'] = 'Diff'
						with open('/tmp/cfgmgr.w.txt', 'w') as file:
							file.write(WorkingContent)
						with open('/tmp/cfgmgr.c.txt', 'w') as file:
							file.write(attr['CacheContent'])

def DisplayStatus():
	print('## git status')
	subprocess.run(['git', '-C', TemplateDirectory, 'status'], text=True)
	NeedTitle=1
	for RelPath, attr in Files.items():
		# Skip files with "same" status
		if attr['Status'] == 'Same(ts)': continue
		if attr['Status'] == 'Same(content)': continue
		if attr['Status'] == 'Empty': continue
		#if attr['Status'] == 'Similar': continue
		if NeedTitle:
			print("## Differences between template repo and working directory:")
			print("   Run 'cfgmgr apply' to apply template to working directory")
			NeedTitle=0
		print(f"    {attr['Status'].ljust(13)}: {RelPath}")

def GetGitStatusOneline():
	output = subprocess.run(['git', '-C', TemplateDirectory, 'status', '--porcelain=v2', '--branch'], capture_output=True)
	if output.returncode != 0:
		return 'git-error'
	
	OutputLines = output.stdout.decode().split('\n')
	
	# Process git OutputLines to get summary
	Ahead = 0
	Behind = 0
	StatusCount = {}
	for line in OutputLines:
		if not line: continue
		match = re.match(r'^# branch.ab \+(?P<Ahead>\d+) \-(?P<Behind>\d+)', line)
		if match:
			Ahead = int(match.group('Ahead'))
			Behind = int(match.group('Behind'))
			continue
		if re.match(r'^#', line):
			continue
			# Do nothing
		
		match = re.match(r'^1 (?P<XY>..) (?P<SubmoduleState>....) (?P<modeHead>[0-7]{6}) (?P<modeIndex>[0-7]{6}) (?P<modeWorktree>[0-7]{6}) (?P<hashHead>[0-9a-f]{40}) (?P<hashIndex>[0-9a-f]{40}) (?P<path>.+)$', line)
		if match:
			# X is index; Y is working-tree
			if   match.group('XY') == 'A.': StatusCount['A'] = StatusCount.get('A', 0) + 1
			elif match.group('XY') == '.M': StatusCount['m'] = StatusCount.get('m', 0) + 1
			elif match.group('XY') == '.D': StatusCount['d'] = StatusCount.get('d', 0) + 1
			elif match.group('XY') == 'M.': StatusCount['M'] = StatusCount.get('M', 0) + 1
			else:                           StatusCount['?'] = StatusCount.get('?', 0) + 1
			continue
			
		if   re.match(r'^\? (?P<path>.*)$', line): StatusCount['u'] = StatusCount.get('u', 0) + 1
		elif re.match(r'^! (?P<path>.*)$', line) : StatusCount['i'] = StatusCount.get('i', 0) + 1
		else                                     : 
			StatusCount['?'] = StatusCount.get('?', 0) + 1
			print(f"DEBUG: Unmatched line: {line}")
	
	OutputString = ''
	for key, value in StatusCount.items():
		OutputString += f"{key}{value}"
	
	#This looked correct on WSL, but not native
	#if($Ahead       ) { $str .= "⭡$Ahead"; }
	#if($Behind      ) { $str .= "⭣$Behind"; }
	#This looks correct on native
	if Ahead : OutputString += f"⇡{Ahead}"
	if Behind: OutputString += f"⇣{Behind}"
	
	return OutputString

def PrintStatusOneline():
	## Get git status
	GitString = GetGitStatusOneline()
	
	## Get working status
	Extra=0
	Missing=0
	Diff=0
	for RelPath, attr in Files.items():
		# Skip files with "same" status
		if attr['Status'] == 'Exists-extra':
			Extra=Extra+1
		elif attr['Status'] == 'Missing':
			Missing=Missing+1
		elif attr['Status'] == 'Diff':
			Diff=Diff+1
	WorkingString = ''
	if Extra: WorkingString += f"E{Extra}"
	if Missing: WorkingString += f"M{Missing}"
	if Diff: WorkingString += f"D{Diff}"
	
	Separator = ''
	if WorkingString and GitString:
		WorkingString = f"W:{WorkingString}"
		GitString = f"G:{GitString}"
		Separator = ' '
	print(f"{WorkingString}{Separator}{GitString}")


def Apply(FilesToApply):
	LOG(3, f'cfgmgr: Apply: Applying...')
	# If no files specified, apply all
	Mode = 'a'
	if not FilesToApply:
		FilesToApply = list(Files.keys())
		Mode = 'w'
	LOG(4, f'cfgmgr: Apply:   Log Mode={Mode}')
	
	with open(RunLog, Mode) as LogFile:
		LogFile.write(f"## {datetime.datetime.now()}\n")
		for RelPath in FilesToApply:
			LOG(4, f'cfgmgr: Apply:   File={RelPath}')
			if RelPath not in Files:
				raise UserError(f"ERROR: {RelPath} is not managed")
			
			attr = Files[RelPath]
			
			## Make sure file was not modified in working directory since last apply
			if (attr['Last_ApplyModTime'] > 0) and (attr['WorkingLastModTime'] != attr['Last_ApplyModTime']):
				
				print(f"{RelPath}: File has been modified in working directory - skipping!")
				pp(attr)
				continue
			
			LOG(4, f"cfgmgr: Apply:     Status={attr['Status']}")
			WriteLog = False
			if attr['Status'] == 'Same(ts)':
				# Nothing to do: Timestamp is same as last apply
				pass
			elif attr['Status'] == "Same(content)":
				# Update timestamp so don't need to read file next time
				WriteLog = True
				attr['Last_ApplyModTime'] = attr['WorkingLastModTime']
			elif attr['Status'] == 'Empty':
				# Nothing to do (cache and working don't exist)
				pass
			elif attr['Status'] == "Exists-but-shouldn't":
				os.remove(attr['WorkingPath'])
				attr['Last_ApplyModTime'] = 0
				WriteLog = True
			elif    (attr['Status'] == "Missing") \
			     or (attr['Status'] == "Similar") \
			     or (attr['Status'] == "Diff"):
				WorkingDir = os.path.dirname(attr['WorkingPath'])
				os.makedirs(WorkingDir, exist_ok=True)
				shutil.copy(attr['CachePath'], attr['WorkingPath'])
				attr['Last_ApplyModTime'] = os.path.getmtime(attr['WorkingPath'])
				WriteLog = True
			else:
				raise InternalError(f"ERROR: Unknown status: {attr['Status']}")
			
			if WriteLog:
				LogFile.write(f"{RelPath},{attr['Last_ApplyModTime']},{attr['TemplateLastModTime']},{attr['IsTemplate']},{attr['IsEmpty']}\n")

def Add(FilesToAdd):
	for RelPath in FilesToAdd:
		WorkingPath = ''
		TemplatePath = ''
		CachePath = ''
		WorkingLastModTime = 0
		if RelPath in Files:
			## Error if file is a template
			if Files[RelPath]['IsTemplate']:
				raise RuntimeError(f"{RelPath}: Cannot add template file from working directory; update template in repo instead.")
			WorkingPath = Files[RelPath]['WorkingPath']
			TemplatePath = Files[RelPath]['TemplatePath']
			CachePath = Files[RelPath]['CachePath']
			WorkingLastModTime = Files[RelPath]['WorkingLastModTime']
		
		## Copy file from working directory to template directory, and set template time to working time
		if not WorkingPath: WorkingPath = os.path.join(WorkingDirectory, RelPath)
		if not TemplatePath: TemplatePath = os.path.join(TemplateDirectory, RelPath)
		if not CachePath: CachePath = os.path.join(CacheDirectory, RelPath)
		if not WorkingLastModTime: WorkingLastModTime = os.path.getmtime(WorkingPath)
		
		TemplateDir = os.path.dirname(TemplatePath)
		os.makedirs(TemplateDir, exist_ok=True)
		shutil.copy(WorkingPath, TemplatePath)
		subprocess.run(['git', '-C', TemplateDirectory, 'add', RelPath], text=True)
		
		#TO DO: Update cache file, verify it matches (no "template" processing errrors)

def Diff(FilesToDiff):
	FileType1 = 'Template'
	FileType2 = 'Working'
	if FilesToDiff[0] == '--cvw':
		FileType1 = 'Cache'
		FilesToDiff.pop(0)
	elif FilesToDiff[0] == '--tvc':
		FileType2 = 'Cache'
		FilesToDiff.pop(0)
	
	if len(FilesToDiff) == 0:
		raise UserWarning("diff requires arguments")
	
	for RelPath in FilesToDiff:
		if RelPath not in Files:
			raise UserError(f"ERROR: {RelPath} is not managed")
		
		attr = Files[RelPath]
		#subprocess.run(['/usr/bin/bcompare', attr[f'{FileType1}Path'], attr[f'{FileType2}Path']], text=True)
		subprocess.run([ConfigData['difftool'], attr[f'{FileType1}Path'], attr[f'{FileType2}Path']], text=True)


if __name__ == "__main__":
	## Remove program name
	sys.argv.pop(0)
	
	# Process options
	while (len(sys.argv) > 0) and (sys.argv[0][0] == '-'):
		arg = sys.argv.pop(0)
		if arg == '--verbose':
			current_verbosity = current_verbosity + 1
		else:
			raise UserWarning(f"Unknown option: {arg}")
	if len(sys.argv) < 1:
		SubCommand = 'status'
	else:
		SubCommand = sys.argv.pop(0)
	
	CacheSubdir = TemplateDirectory.lstrip('/').replace('/','--')
	if not CacheSubdir: CacheSubdir = 'ROOT_DIR'
	CacheDirectory = os.path.join(CacheRoot, CacheSubdir)
	RunLog = os.path.join(CacheDirectory, 'run-log.cfgmgr')
	LoadTemplateFiles()
	
	if SubCommand == 'UpdateCache':
		UpdateCacheFiles()
	elif SubCommand == 'CleanCache':
		CleanCacheFiles()
	
	elif SubCommand == 'status':
		UpdateCacheFiles()
		CalculateStatus()
		DisplayStatus()
	
	elif SubCommand == 'statusOneline':
		UpdateCacheFiles()
		CalculateStatus()
		PrintStatusOneline()
	
	elif SubCommand == 'git':
		subprocess.run(['git', '-C', TemplateDirectory, '--no-pager', *sys.argv], text=True)
	
	elif SubCommand == 'diff':
		LoadConfigData()
		UpdateCacheFiles()
		Diff(sys.argv)
	
	elif SubCommand == 'add':
		UpdateCacheFiles()
		CalculateStatus()
		Add(sys.argv)
	
	elif SubCommand == 'apply':
		UpdateCacheFiles()
		CalculateStatus()
		Apply(sys.argv)
	else:
		#raise Exception('Usage Error', f"ERROR: Unknown sub-command: {SubCommand}")
		print(f"ERROR: Unknown sub-command: {SubCommand}")
		exit(1)
